
==================== FINAL INTERFACE ====================
2017-07-20 14:55:42.641433 UTC

interface algos-hs-0.1.0.0-4Sko5DL6jdz40iPla4bF54:Sort.InsertionSort 8002
  interface hash: d5fbbef64003c769191684b21aeb19ce
  ABI hash: 1d7a3570cdfaf6804e424e1af35c4479
  export-list hash: 02290ac3063c876e4fe02587e394935a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c803e0eafbdc1e82ae48825bf3d5e598
  sig of: Nothing
  used TH splices: False
  where
exports:
  Sort.InsertionSort.insertionSort
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
5e7c1caa75440b51bbbc4ac2fab43acf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Sort.InsertionSort.$trModule2
                   Sort.InsertionSort.$trModule1) -}
d1293da957ad83343e3218b505b31b89
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Sort.InsertionSort"#) -}
73fb4959b26f5e839048b88e20378ad1
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "algos-hs-0.1.0.0-4Sko5DL6jdz40iPla4bF54"#) -}
16866605cf07d8045278ea2e083a5ad1
  insertionSort :: GHC.Classes.Ord a => [a] -> [a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) (eta :: [a]) ->
                 let {
                   lvl :: a -> a -> GHC.Types.Ordering = GHC.Classes.compare @ a $dOrd
                 } in
                 letrec {
                   go :: [a] -> [a] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ a
                       : y ys
                       -> case Data.OldList.$winsertBy
                                 @ a
                                 lvl
                                 y
                                 (go ys) of ww { (#,#) ww1 ww2 ->
                          GHC.Types.: @ a ww1 ww2 } }
                 } in
                 go eta) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

