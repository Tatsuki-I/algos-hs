
==================== FINAL INTERFACE ====================
2017-07-14 11:47:52.900129 UTC

interface algos-hs-0.1.0.0-8t08XiJuizj41xgenO3a7P:Sort.MergeSort 8002
  interface hash: 28f7d3c8230944f16e25fcd8a7c44085
  ABI hash: 5eed090d275a90937bfc1dd0f8ad062e
  export-list hash: 91aa8bf2aaa9a200dd1943ed9465b591
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c803e0eafbdc1e82ae48825bf3d5e598
  sig of: Nothing
  used TH splices: False
  where
exports:
  Sort.MergeSort.halve
  Sort.MergeSort.merge
  Sort.MergeSort.mergeSort
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
261d5e04dd5cde76bf2c6e739d06606e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Sort.MergeSort.$trModule2
                   Sort.MergeSort.$trModule1) -}
040ebae603211d6ed0af9e9b311c5a2e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Sort.MergeSort"#) -}
c12963071e7434bf691fb483b4febce0
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "algos-hs-0.1.0.0-8t08XiJuizj41xgenO3a7P"#) -}
15f2323d522508875a6ac8ee96d8728a
  $whalve :: [a] -> (# [a], [a] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ @ a (w :: [a]) ->
                 let {
                   lsLength :: GHC.Types.Int
                   = case GHC.List.$wlenAcc @ a w 0# of ww2 { DEFAULT ->
                     case GHC.Classes.divInt# ww2 2# of ww4 { DEFAULT ->
                     GHC.Types.I# ww4 } }
                 } in
                 (# case lsLength of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# y) of wild {
                      GHC.Types.False -> GHC.Types.[] @ a
                      GHC.Types.True -> GHC.List.$wunsafeTake @ a y w } },
                    GHC.List.drop @ a lsLength w #)) -}
6d94414b8b607566c72fb643054943f9
  halve :: [a] -> ([a], [a])
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: [a]) ->
                 case Sort.MergeSort.$whalve @ a w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
70ae69d0957b744f678e1c34bf9ce3bc
  merge :: GHC.Classes.Ord a => [a] -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,1*U><S,1*U> -}
a2e44d7a6ed9874a6516f38d93626f95
  mergeSort :: GHC.Classes.Ord a => [a] -> [a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

